; Bin zu ASCII Turing-Maschine
; Geschrieben für den Turing-Maschinen-Simulator auf https://morphett.info/turing/turing.html
; Erwartet binäre Eingabe rechts des Cursors, mit Leerzeichen in 4-bit-Abschnitte getrennt.
; geschrieben von ea-ooe

0 * * r 4splitcheck

; Testen ob das Input schon gespalten ist, oder nicht
4splitcheck _ * r 4splitcheckgo
4splitcheck * * r 4splitcheck

4splitcheckgo _ * * 4splitinit
4splitcheckgo * * r 4splitcheck1
4splitcheck1 * * r 4splitcheck2
4splitcheck2 * * r 4splitcheck3
4splitcheck3 * * r 4splitcheck4
4splitcheck4 _ * l no4splitinit
4splitcheck4 * * * 4splitinit

; Zurück in die Startposition, wenn Input nicht gespalten werden muss.
no4splitinit _ * l no4splitinit2
no4splitinit * * l no4splitinit

no4splitinit2 _ * r no4splitinit3
no4splitinit2 * * l no4splitinit

no4splitinit3 _ * r no4splitinit3
no4splitinit3 * * * init


; Rechtes Ende des Inputs suchen
4splitinit _ * r 4splitinit2
4splitinit 0 * r 4splitinit
4splitinit 1 * r 4splitinit

4splitinit2 _ / * 4splitsearchleft1
4splitinit2 * * r 4splitinit

4splitsearchleft1 * * l 4splitsearchleft21
4splitsearchleft21 _ * l 4splitsearchleft31
4splitsearchleft21 * * l 4splitsearchleft1
4splitsearchleft31 _ * l 4splitsearchleft41
4splitsearchleft31 * * l 4splitsearchleft1
4splitsearchleft41 _ * l 4splitsearchright1
4splitsearchleft41 * * l 4splitsearchleft1

4splitsearchright1 _ * r 4splitsearchright1
4splitsearchright1 0 _ r 4splitreturn01
4splitsearchright1 1 _ r 4splitreturn11
4splitsearchright1 / _ r init

4splitreturn01 / * r 4splitwrite01
4splitreturn01 * * r 4splitreturn01
4splitreturn11 / * r 4splitwrite11
4splitreturn11 * * r 4splitreturn11

4splitwrite01 _ 0 l 4splitsearchleft2
4splitwrite01 * * r 4splitwrite01
4splitwrite11 _ 1 l 4splitsearchleft2
4splitwrite11 * * r 4splitwrite11

4splitsearchleft2 * * l 4splitsearchleft22
4splitsearchleft22 _ * l 4splitsearchleft32
4splitsearchleft22 * * l 4splitsearchleft2
4splitsearchleft32 _ * l 4splitsearchleft42
4splitsearchleft32 * * l 4splitsearchleft2
4splitsearchleft42 _ * l 4splitsearchright2
4splitsearchleft42 * * l 4splitsearchleft2

4splitsearchright2 _ * r 4splitsearchright2
4splitsearchright2 0 _ r 4splitreturn02
4splitsearchright2 1 _ r 4splitreturn12
4splitsearchright2 / _ r init

4splitreturn02 / * r 4splitwrite02
4splitreturn02 * * r 4splitreturn02
4splitreturn12 / * r 4splitwrite12
4splitreturn12 * * r 4splitreturn12

4splitwrite02 _ 0 l 4splitsearchleft3
4splitwrite02 * * r 4splitwrite02
4splitwrite12 _ 1 l 4splitsearchleft3
4splitwrite12 * * r 4splitwrite12


4splitsearchleft3 * * l 4splitsearchleft23
4splitsearchleft23 _ * l 4splitsearchleft33
4splitsearchleft23 * * l 4splitsearchleft3
4splitsearchleft33 _ * l 4splitsearchleft43
4splitsearchleft33 * * l 4splitsearchleft3
4splitsearchleft43 _ * l 4splitsearchright3
4splitsearchleft43 * * l 4splitsearchleft3

4splitsearchright3 _ * r 4splitsearchright3
4splitsearchright3 0 _ r 4splitreturn03
4splitsearchright3 1 _ r 4splitreturn13
4splitsearchright3 / _ r init

4splitreturn03 / * r 4splitwrite03
4splitreturn03 * * r 4splitreturn03
4splitreturn13 / * r 4splitwrite13
4splitreturn13 * * r 4splitreturn13

4splitwrite03 _ 0 l 4splitsearchleft4
4splitwrite03 * * r 4splitwrite03
4splitwrite13 _ 1 l 4splitsearchleft4
4splitwrite13 * * r 4splitwrite13

4splitsearchleft4 * * l 4splitsearchleft24
4splitsearchleft24 _ * l 4splitsearchleft34
4splitsearchleft24 * * l 4splitsearchleft4
4splitsearchleft34 _ * l 4splitsearchleft44
4splitsearchleft34 * * l 4splitsearchleft4
4splitsearchleft44 _ * l 4splitsearchright4
4splitsearchleft44 * * l 4splitsearchleft4

4splitsearchright4 _ * r 4splitsearchright4
4splitsearchright4 0 _ r 4splitreturn04
4splitsearchright4 1 _ r 4splitreturn14
4splitsearchright4 / _ r init

4splitreturn04 / * r 4splitwrite04
4splitreturn04 * * r 4splitreturn04
4splitreturn14 / * r 4splitwrite14
4splitreturn14 * * r 4splitreturn14

4splitwrite04 _ 0 r 4splitsplit
4splitwrite04 * * r 4splitwrite04
4splitwrite14 _ 1 r 4splitsplit
4splitwrite14 * * r 4splitwrite14

4splitsplit * ! l 4splitsearchleft1


; Ich suche das rechte Ende des Inputs
init 0 * r init
init 1 * r init
init _ * l go
init ! * l go

; Ich stelle die Erste Binärziffer fest, und setze dementsprechend fort, bis ich in einem 4-stelligen Zustand bin
go 0 * l zero
go 1 * l 1

zero 0 * l 00
zero 1 * l 10

1 0 * l 01
1 1 * l 11

00 0 * l 000
00 1 * l 100

01 0 * l 001
01 1 * l 101

10 0 * l 010
10 1 * l 110

11 0 * l 011
11 1 * l 111

000 0 * * 0000
000 1 * * 1000

001 0 * * 0001
001 1 * * 1001

010 0 * * 0010
010 1 * * 1010

011 0 * * 0011
011 1 * * 1011

100 0 * * 0100
100 1 * * 1100

101 0 * * 0101
101 1 * * 1101

110 0 * * 0110
110 1 * * 1110

111 0 * * 0111
111 1 * * 1111

; Ich schreibe das dieser 4-Bit-Zahl entsprechende zeichen dahinter, und starte die Suche nach mehr input.
0000 0 * r 0000
0000 1 * r 0000
0000 _ O r again
0000 ! O r again

0001 0 * r 0001
0001 1 * r 0001
0001 _ I r again
0001 ! I r again

0010 0 * r 0010
0010 1 * r 0010
0010 _ 2 r again
0010 ! 2 r again

0011 0 * r 0011
0011 1 * r 0011
0011 _ 3 r again
0011 ! 3 r again

0100 0 * r 0100
0100 1 * r 0100
0100 _ 4 r again
0100 ! 4 r again

0101 0 * r 0101
0101 1 * r 0101
0101 _ 5 r again 
0101 ! 5 r again 

0110 0 * r 0110
0110 1 * r 0110
0110 _ 6 r again 
0110 ! 6 r again 

0111 0 * r 0111
0111 1 * r 0111
0111 _ 7 r again
0111 ! 7 r again

1000 0 * r 1000
1000 1 * r 1000
1000 _ 8 r again
1000 ! 8 r again

1001 0 * r 1001
1001 1 * r 1001
1001 _ 9 r again
1001 ! 9 r again

1010 0 * r 1010
1010 1 * r 1010
1010 _ A r again
1010 ! A r again

1011 0 * r 1011
1011 1 * r 1011
1011 _ B r again
1011 ! B r again

1100 0 * r 1100
1100 1 * r 1100
1100 _ C r again
1100 ! C r again

1101 0 * r 1101
1101 1 * r 1101
1101 _ D r again
1101 ! D r again

1110 0 * r 1110
1110 1 * r 1110
1110 _ E r again
1110 ! E r again

1111 0 * r 1111
1111 1 * r 1111
1111 _ F r again
1111 ! F r again

; Wenn wir mehr Input finden, bearbeiten wir es erneut, wie von vorne. Wenn nicht, bereiten den Putzprozess vor, der Nullen und Einsen durch Leerzeichen ersetzt.
again _ * l cleaninit
again 0 * * init
again 1 * * init

; Wir suchen das linke Ende des Inputs, und beginnen den Putzprozess.
cleaninit _ * r clean
cleaninit * * l cleaninit

; Wir ersetzen alle Nullen und Einsen durch Leerzeichen, lassen unser Arbeitsergebnis heil, und bereiten den Aufräumprozess vor, der unser Output zusammenzieht.
clean 0 _ r clean
clean 1 _ r clean
clean _ * * tidyinit
clean * * r clean

; Wir setzen einen Input-Output-Trenner (/) und suchen den Anfang unseres Outputs. Wenn wir 4 Zeichen lang nur Leerzeichen finden sind wir am Ende angelangt, und können das nächste Zeichen zum verschieben suchen.
tidyinit _ / l tidyinit2

tidyinit2 _ * l tidyinit22
tidyinit2 * * l tidyinit2

tidyinit22 _ * l tidyinit23

tidyinit23 _ * l tidyinit24

tidyinit24 _ * l tidyinit25

tidyinit25 _ * r tidysearch
tidyinit25 * * l tidyinit2

; Wir suchen uns ein Zeichen, das wir hinter das (/) verschieben möchten.
tidysearch _ * r tidysearch
tidysearch O _ r tidyreturn0
tidysearch I _ r tidyreturn1
tidysearch 2 _ r tidyreturn2
tidysearch 3 _ r tidyreturn3
tidysearch 4 _ r tidyreturn4
tidysearch 5 _ r tidyreturn5
tidysearch 6 _ r tidyreturn6
tidysearch 7 _ r tidyreturn7
tidysearch 8 _ r tidyreturn8
tidysearch 9 _ r tidyreturn9
tidysearch A _ r tidyreturnA
tidysearch B _ r tidyreturnB
tidysearch C _ r tidyreturnC
tidysearch D _ r tidyreturnD
tidysearch E _ r tidyreturnE
tidysearch F _ r tidyreturnF
tidysearch / _ r goright

; Wir suchen den (/) um erst dahinter unser Zeichen zu platzieren.
tidyreturn0 / * r tidyput0
tidyreturn0 * * r tidyreturn0

tidyreturn1 / * r tidyput1
tidyreturn1 * * r tidyreturn1

tidyreturn2 / * r tidyput2
tidyreturn2 * * r tidyreturn2

tidyreturn3 / * r tidyput3
tidyreturn3 * * r tidyreturn3

tidyreturn4 / * r tidyput4
tidyreturn4 * * r tidyreturn4

tidyreturn5 / * r tidyput5
tidyreturn5 * * r tidyreturn5

tidyreturn6 / * r tidyput6
tidyreturn6 * * r tidyreturn6

tidyreturn7 / * r tidyput7
tidyreturn7 * * r tidyreturn7

tidyreturn8 / * r tidyput8
tidyreturn8 * * r tidyreturn8

tidyreturn9 / * r tidyput9
tidyreturn9 * * r tidyreturn9

tidyreturnA / * r tidyputA
tidyreturnA * * r tidyreturnA

tidyreturnB / * r tidyputB
tidyreturnB * * r tidyreturnB

tidyreturnC / * r tidyputC
tidyreturnC * * r tidyreturnC

tidyreturnD / * r tidyputD
tidyreturnD * * r tidyreturnD

tidyreturnE / * r tidyputE
tidyreturnE * * r tidyreturnE

tidyreturnF / * r tidyputF
tidyreturnF * * r tidyreturnF

; Wir suchen das Ende des bisherigen Outputs und platzieren dort unser Zeichen. Anschließend suchen wir das nächste.
tidyput0 _ 0 l tidysearchagain
tidyput0 * * r tidyput0

tidyput1 _ 1 l tidysearchagain
tidyput1 * * r tidyput1

tidyput2 _ 2 l tidysearchagain
tidyput2 * * r tidyput2

tidyput3 _ 3 l tidysearchagain
tidyput3 * * r tidyput3

tidyput4 _ 4 l tidysearchagain
tidyput4 * * r tidyput4

tidyput5 _ 5 l tidysearchagain
tidyput5 * * r tidyput5

tidyput6 _ 6 l tidysearchagain
tidyput6 * * r tidyput6

tidyput7 _ 7 l tidysearchagain
tidyput7 * * r tidyput7

tidyput8 _ 8 l tidysearchagain
tidyput8 * * r tidyput8

tidyput9 _ 9 l tidysearchagain
tidyput9 * * r tidyput9

tidyputA _ A l tidysearchagain
tidyputA * * r tidyputA

tidyputB _ B l tidysearchagain
tidyputB * * r tidyputB

tidyputC _ C l tidysearchagain
tidyputC * * r tidyputC

tidyputD _ D l tidysearchagain
tidyputD * * r tidyputD

tidyputE _ E l tidysearchagain
tidyputE * * r tidyputE

tidyputF _ F l tidysearchagain
tidyputF * * r tidyputF

; Wir beginnen unsere Suche nach dem neuen linken Ende des Outputs, um dort unser nächstes Zeichen zu finden.
tidysearchagain / * l tidyinit2
tidysearchagain * * l tidysearchagain

; Wir positionieren den Cursor hinter dem Output und beenden.
goright _ ¶ * asciiinit
goright * * r goright

asciiinit _ * r asciireadONE
asciiinit * * l asciiinit

asciireadONE 2 _ r asciireadTWO2
asciireadONE 3 _ r asciireadTWO3
asciireadONE 4 _ r asciireadTWO4
asciireadONE 5 _ r asciireadTWO5
asciireadONE 6 _ r asciireadTWO6
asciireadONE 7 _ r asciireadTWO7
asciireadONE ¶ _ r finish

asciireadTWO2 0 _ r asciiwritespace
asciireadTWO2 1 _ r asciiwrite!
asciireadTWO2 2 _ r asciiwrite"
asciireadTWO2 3 _ r asciiwrite#
asciireadTWO2 4 _ r asciiwrite$
asciireadTWO2 5 _ r asciiwrite%
asciireadTWO2 6 _ r asciiwrite&
asciireadTWO2 7 _ r asciiwrite'
asciireadTWO2 8 _ r asciiwrite(
asciireadTWO2 9 _ r asciiwrite)
asciireadTWO2 A _ r asciiwritestar
asciireadTWO2 B _ r asciiwrite+
asciireadTWO2 C _ r asciiwrite,
asciireadTWO2 D _ r asciiwrite-
asciireadTWO2 E _ r asciiwrite.
asciireadTWO2 F _ r asciiwrite/

asciireadTWO3 0 _ r asciiwrite0
asciireadTWO3 1 _ r asciiwrite1
asciireadTWO3 2 _ r asciiwrite2
asciireadTWO3 3 _ r asciiwrite3
asciireadTWO3 4 _ r asciiwrite4
asciireadTWO3 5 _ r asciiwrite5
asciireadTWO3 6 _ r asciiwrite6
asciireadTWO3 7 _ r asciiwrite7
asciireadTWO3 8 _ r asciiwrite8
asciireadTWO3 9 _ r asciiwrite9
asciireadTWO3 A _ r asciiwrite:
asciireadTWO3 B _ r asciiwritesemicolon
asciireadTWO3 C _ r asciiwrite<
asciireadTWO3 D _ r asciiwrite=
asciireadTWO3 E _ r asciiwrite>
asciireadTWO3 F _ r asciiwrite?

asciireadTWO4 0 _ r asciiwrite@
asciireadTWO4 1 _ r asciiwriteA
asciireadTWO4 2 _ r asciiwriteB
asciireadTWO4 3 _ r asciiwriteC
asciireadTWO4 4 _ r asciiwriteD
asciireadTWO4 5 _ r asciiwriteE
asciireadTWO4 6 _ r asciiwriteF
asciireadTWO4 7 _ r asciiwriteG
asciireadTWO4 8 _ r asciiwriteH
asciireadTWO4 9 _ r asciiwriteI
asciireadTWO4 A _ r asciiwriteJ
asciireadTWO4 B _ r asciiwriteK
asciireadTWO4 C _ r asciiwriteL
asciireadTWO4 D _ r asciiwriteM
asciireadTWO4 E _ r asciiwriteN
asciireadTWO4 F _ r asciiwriteO

asciireadTWO5 0 _ r asciiwriteP
asciireadTWO5 1 _ r asciiwriteQ
asciireadTWO5 2 _ r asciiwriteR
asciireadTWO5 3 _ r asciiwriteS
asciireadTWO5 4 _ r asciiwriteT
asciireadTWO5 5 _ r asciiwriteU
asciireadTWO5 6 _ r asciiwriteV
asciireadTWO5 7 _ r asciiwriteW
asciireadTWO5 8 _ r asciiwriteX
asciireadTWO5 9 _ r asciiwriteY
asciireadTWO5 A _ r asciiwriteZ
asciireadTWO5 B _ r asciiwrite[
asciireadTWO5 C _ r asciiwrite\
asciireadTWO5 D _ r asciiwrite]
asciireadTWO5 E _ r asciiwrite^
asciireadTWO5 F _ r asciiwriteunderscore

asciireadTWO6 0 _ r asciiwrite`
asciireadTWO6 1 _ r asciiwritea
asciireadTWO6 2 _ r asciiwriteb
asciireadTWO6 3 _ r asciiwritec
asciireadTWO6 4 _ r asciiwrited
asciireadTWO6 5 _ r asciiwritee
asciireadTWO6 6 _ r asciiwritef
asciireadTWO6 7 _ r asciiwriteg
asciireadTWO6 8 _ r asciiwriteh
asciireadTWO6 9 _ r asciiwritei
asciireadTWO6 A _ r asciiwritej
asciireadTWO6 B _ r asciiwritek
asciireadTWO6 C _ r asciiwritel
asciireadTWO6 D _ r asciiwritem
asciireadTWO6 E _ r asciiwriten
asciireadTWO6 F _ r asciiwriteo

asciireadTWO7 0 _ r asciiwritep
asciireadTWO7 1 _ r asciiwriteq
asciireadTWO7 2 _ r asciiwriter
asciireadTWO7 3 _ r asciiwrites
asciireadTWO7 4 _ r asciiwritet
asciireadTWO7 5 _ r asciiwriteu
asciireadTWO7 6 _ r asciiwritev
asciireadTWO7 7 _ r asciiwritew
asciireadTWO7 8 _ r asciiwritex
asciireadTWO7 9 _ r asciiwritey
asciireadTWO7 A _ r asciiwritez
asciireadTWO7 B _ r asciiwrite{
asciireadTWO7 C _ r asciiwrite|
asciireadTWO7 D _ r asciiwrite}
asciireadTWO7 E _ r asciiwrite~


; Wenn wir ein Symbol zum schreiben haben, müssen wir ganz nach rechts.

asciiwritespace * * r asciiwritespace
asciiwritespace _ ß * asciiinit
asciiwrite! * * r asciiwrite!
asciiwrite! _ ! * asciiinit
asciiwrite" * * r asciiwrite"
asciiwrite" _ " * asciiinit
asciiwrite# * * r asciiwrite#
asciiwrite# _ # * asciiinit
asciiwrite$ * * r asciiwrite$
asciiwrite$ _ $ * asciiinit
asciiwrite% * * r asciiwrite%
asciiwrite% _ % * asciiinit
asciiwrite& * * r asciiwrite&
asciiwrite& _ & * asciiinit
asciiwrite' * * r asciiwrite'
asciiwrite' _ ' * asciiinit
asciiwrite( * * r asciiwrite(
asciiwrite( _ ( * asciiinit
asciiwrite) * * r asciiwrite)
asciiwrite) _ ) * asciiinit
asciiwritestar * * r asciiwritestar
asciiwritestar _ ⁎ * asciiinit
asciiwrite+ * * r asciiwrite+
asciiwrite+ _ + * asciiinit
asciiwrite, * * r asciiwrite,
asciiwrite, _ , * asciiinit
asciiwrite- * * r asciiwrite-
asciiwrite- _ - * asciiinit
asciiwrite. * * r asciiwrite.
asciiwrite. _ . * asciiinit
asciiwrite/ * * r asciiwrite/
asciiwrite/ _ / * asciiinit


asciiwrite0 * * r asciiwrite0
asciiwrite0 _ 0 * asciiinit
asciiwrite1 * * r asciiwrite1
asciiwrite1 _ 1 * asciiinit
asciiwrite2 * * r asciiwrite2
asciiwrite2 _ 2 * asciiinit
asciiwrite3 * * r asciiwrite3
asciiwrite3 _ 3 * asciiinit
asciiwrite4 * * r asciiwrite4
asciiwrite4 _ 4 * asciiinit
asciiwrite5 * * r asciiwrite5
asciiwrite5 _ 5 * asciiinit
asciiwrite6 * * r asciiwrite6
asciiwrite6 _ 6 * asciiinit
asciiwrite7 * * r asciiwrite7
asciiwrite7 _ 7 * asciiinit
asciiwrite8 * * r asciiwrite8
asciiwrite8 _ 8 * asciiinit
asciiwrite9 * * r asciiwrite9
asciiwrite9 _ 9 * asciiinit
asciiwrite: * * r asciiwrite:
asciiwrite: _ : * asciiinit
asciiwritesemicolon * * r asciiwritesemicolon
asciiwritesemicolon _ ︔ * asciiinit
asciiwrite< * * r asciiwrite<
asciiwrite< _ < * asciiinit
asciiwrite= * * r asciiwrite=
asciiwrite= _ = * asciiinit
asciiwrite> * * r asciiwrite>
asciiwrite> _ > * asciiinit
asciiwrite? * * r asciiwrite?
asciiwrite? _ ? * asciiinit


asciiwrite@ * * r asciiwrite@
asciiwrite@ _ @ * asciiinit
asciiwriteA * * r asciiwriteA
asciiwriteA _ A * asciiinit
asciiwriteB * * r asciiwriteB
asciiwriteB _ B * asciiinit
asciiwriteC * * r asciiwriteC
asciiwriteC _ C * asciiinit
asciiwriteD * * r asciiwriteD
asciiwriteD _ D * asciiinit
asciiwriteE * * r asciiwriteE
asciiwriteE _ E * asciiinit
asciiwriteF * * r asciiwriteF
asciiwriteF _ F * asciiinit
asciiwriteG * * r asciiwriteG
asciiwriteG _ G * asciiinit
asciiwriteH * * r asciiwriteH
asciiwriteH _ H * asciiinit
asciiwriteI * * r asciiwriteI
asciiwriteI _ I * asciiinit
asciiwriteJ * * r asciiwriteJ
asciiwriteJ _ J * asciiinit
asciiwriteK * * r asciiwriteK
asciiwriteK _ K * asciiinit
asciiwriteL * * r asciiwriteL
asciiwriteL _ L * asciiinit
asciiwriteM * * r asciiwriteM
asciiwriteM _ M * asciiinit
asciiwriteN * * r asciiwriteN
asciiwriteN _ N * asciiinit
asciiwriteO * * r asciiwriteO
asciiwriteO _ O * asciiinit


asciiwriteP * * r asciiwriteP
asciiwriteP _ P * asciiinit
asciiwriteQ * * r asciiwriteQ
asciiwriteQ _ Q * asciiinit
asciiwriteR * * r asciiwriteR
asciiwriteR _ R * asciiinit
asciiwriteS * * r asciiwriteS
asciiwriteS _ S * asciiinit
asciiwriteT * * r asciiwriteT
asciiwriteT _ T * asciiinit
asciiwriteU * * r asciiwriteU
asciiwriteU _ U * asciiinit
asciiwriteV * * r asciiwriteV
asciiwriteV _ V * asciiinit
asciiwriteW * * r asciiwriteW
asciiwriteW _ W * asciiinit
asciiwriteX * * r asciiwriteX
asciiwriteX _ X * asciiinit
asciiwriteY * * r asciiwriteY
asciiwriteY _ Y * asciiinit
asciiwriteZ * * r asciiwriteZ
asciiwriteZ _ Z * asciiinit
asciiwrite[ * * r asciiwrite[
asciiwrite[ _ [ * asciiinit
asciiwrite\ * * r asciiwrite\
asciiwrite\ _ \ * asciiinit
asciiwrite] * * r asciiwrite]
asciiwrite] _ ] * asciiinit
asciiwrite^ * * r asciiwrite^
asciiwrite^ _ ^ * asciiinit
asciiwriteunderscore * * r asciiwriteunderscore
asciiwriteunderscore _ ⎽ * asciiinit


asciiwrite` * * r asciiwrite`
asciiwrite` _ ` * asciiinit
asciiwritea * * r asciiwritea
asciiwritea _ a * asciiinit
asciiwriteb * * r asciiwriteb
asciiwriteb _ b * asciiinit
asciiwritec * * r asciiwritec
asciiwritec _ c * asciiinit
asciiwrited * * r asciiwrited
asciiwrited _ d * asciiinit
asciiwritee * * r asciiwritee
asciiwritee _ e * asciiinit
asciiwritef * * r asciiwritef
asciiwritef _ f * asciiinit
asciiwriteg * * r asciiwriteg
asciiwriteg _ g * asciiinit
asciiwriteh * * r asciiwriteh
asciiwriteh _ h * asciiinit
asciiwritei * * r asciiwritei
asciiwritei _ i * asciiinit
asciiwritej * * r asciiwritej
asciiwritej _ j * asciiinit
asciiwritek * * r asciiwritek
asciiwritek _ k * asciiinit
asciiwritel * * r asciiwritel
asciiwritel _ l * asciiinit
asciiwritem * * r asciiwritem
asciiwritem _ m * asciiinit
asciiwriten * * r asciiwriten
asciiwriten _ n * asciiinit
asciiwriteo * * r asciiwriteo
asciiwriteo _ o * asciiinit


asciiwritep * * r asciiwritep
asciiwritep _ p * asciiinit
asciiwriteq * * r asciiwriteq
asciiwriteq _ q * asciiinit
asciiwriter * * r asciiwriter
asciiwriter _ r * asciiinit
asciiwrites * * r asciiwrites
asciiwrites _ s * asciiinit
asciiwritet * * r asciiwritet
asciiwritet _ t * asciiinit
asciiwriteu * * r asciiwriteu
asciiwriteu _ u * asciiinit
asciiwritev * * r asciiwritev
asciiwritev _ v * asciiinit
asciiwritew * * r asciiwritew
asciiwritew _ w * asciiinit
asciiwritex * * r asciiwritex
asciiwritex _ x * asciiinit
asciiwritey * * r asciiwritey
asciiwritey _ y * asciiinit
asciiwritez * * r asciiwritez
asciiwritez _ z * asciiinit
asciiwrite{ * * r asciiwrite{
asciiwrite{ _ { * asciiinit
asciiwrite| * * r asciiwrite|
asciiwrite| _ | * asciiinit
asciiwrite} * * r asciiwrite}
asciiwrite} _ } * asciiinit
asciiwrite~ * * r asciiwrite~
asciiwrite~ _ ~ * asciiinit

; Bewegt den Cursor nach rechts und beendet.
finish _ * * halt
finish ß _ r finish
finish * * r finish
